#Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).
#Return the running sum of nums.

class Solution(object):
    def runningSum(self, nums):
        results = []
        results.append(nums[0])
        for i in range(1, len(nums)):
            results.append(nums[i] + results[i-1])
        return results

#1672
'''You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. 
Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. 
The richest customer is the customer that has the maximum wealth.'''

class Solution(object):
    def maximumWealth(self, accounts):
        maxwealth = 0
        for i in range(len(accounts)):
            totalwealth = sum(accounts[i])
            maxwealth = max(maxwealth, totalwealth)
        return maxwealth

#412
'''Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.'''

class Solution(object):
    def fizzBuzz(self, n):
        results = []
        for i in range(1, n + 1):
            if i % 3 == 0 and i % 5 == 0:
                results.append("FizzBuzz")
            elif i % 3 == 0:
                results.append("Fizz")
            elif i % 5 == 0:
                results.append("Buzz")
            else:
                results.append(str(i))
        return results

#1342
'''Given an integer num, return the number of steps to reduce it to zero.
In one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.'''

class Solution(object):
    def numberOfSteps(self, num):
        steps = 0
        while num > 0:
            if num % 2 == 0:
                num = num /2
            else:
                num = num - 1
            steps += 1
        return steps

#876
'''Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.'''
class Solution(object):
    def middleNode(self, head):
        slow_pointer = head
        fast_pointer = head

        while fast_pointer is not None and fast_pointer.next is not None:
            slow_pointer = slow_pointer.next
            fast_pointer = fast_pointer.next.next\
        
        return slow_pointer

# 13
class Solution(object):
    def romanToInt(self, s):
        convertion_table = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        summation = 0
''' Converting the strings per character into numbers and adding them to the summation variable. range function use to make
sure that the function does not run out of indexes'''
        
        for i in range(len(s)- 1):
            if convertion_table[s[i]] >= convertion_table[s[i+1]]:
                summation += convertion_table[s[i]]
            else:
                summation -= convertion_table[s[i]]

''' To get to the right number the last number needs to be added due to the range function in the for loop'''        
        summation += convertion_table[s[-1]]
        return summation

#1
''' Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.'''

class Solution(object):
    def twoSum(self, nums, target):
       for i in range(len(nums)):
        residual = target - nums[i]
        if residual in nums and nums.index(residual) != i:
            return [i, nums.index(residual)]

