#181
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
| salary      | int     |
| managerId   | int     |
+-------------+---------+
'''id is the primary key (column with unique values) for this table.
Each row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.
 
Write a solution to find the employees who earn more than their managers.
Return the result table in any order.
The result format is in the following example'''

Code:
SELECT A.name as Employee FROM Employee A, Employee B
WHERE A.managerId = B.id 
AND A.salary > B.salary

#182
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| email       | varchar |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains an email. The emails will not contain uppercase letters.
 

Write a solution to report all the duplicate emails. Note that it's guaranteed that the email field is not NULL


Code:
SELECT email FROM Person
group by email
HAVING COUNT(email) > 1;

#183
'''Write a solution to find all customers who never order anything.
Return the result table in any order.
The result format is in the following example.'''

SELECT name as Customers FROM Customers 
LEFT JOIN Orders ON (Customers.id=Orders.customerId)
WHERE Orders.id IS NULL

SELECT name as Customers FROM Customers A
WHERE A.id NOT IN (SELECT customerId FROM Orders)

#177
'''Write a solution to find the nth highest salary from the Employee table. If there is no nth highest salary, return null.'''

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN

SET N=N-1;
  RETURN (
      # Write your MySQL query statement below.
     SELECT DISTINCT salary  
     FROM Employee 
     ORDER BY salary DESC 
     LIMIT 1 OFFSET N
  );
END

#196
'''Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.'''
# cross join to combine every mail in p1 with every mail in p2
DELETE p1 FROM Person p1, Person p2
#Filtering out the instances where the emails are the same, but where the id in 1 is greater than in 2 to remove the highest id instance.
WHERE p1.email = p2.email AND p1.id > p2.id
